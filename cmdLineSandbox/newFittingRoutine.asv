%% Operate within MOD_TimeDynamics class
figHandle = 1;
handles = guidata(figHandle);
self = handles.moduleData.MOD_TimeDynamics;

%% (1a) Linear fit

    if numel(self.constructTimeDynamicsPlot_relativeAcquireTime) ~= size(self.constructTimeDynamicsPlot_summedSpectra,3)
       errordlg('The relativeAcquireTime parameter is not set correctly. Please set it and try again.'); 
       return
    end

    [filename,filepath] = uigetfile('*.simSpec',sprintf('Load Spectra to Fit To'),'MultiSelect', 'on');
    if ~isequal(filename,0) && ~isequal(filepath,0)
       filenames = fullfile(filepath,filename);
    else
        return;
    end
    
    if ~iscell(filenames)
       filenames = {filenames}; 
    end

    fitArray = {};
    for i = 1:numel(filenames)
       [~,~,ext] = fileparts(filenames{i});
       switch ext
           case '.simSpec'
                data = load(filenames{i},'-mat');
                fitArray{end+1} = data.wavenumber;
                fitArray{end+1} = data.crossSection;
                %figure;plot(data.wavenumber,data.crossSection);
                disp('Warning: .simSpec format may change');
           case '.csv'
               error('csv: not implemented')
           case '.specLib'
               error('specLib: not implemented')
       end
    end
    
    %return;
    h_waitbar = waitbar(0,sprintf('Fitting Spectrum 1 of %i\n',size(self.constructTimeDynamicsPlot_summedSpectra,3)));
    betas = zeros(numel(fitArray)/2,size(self.constructTimeDynamicsPlot_summedSpectra,3));
    fittedYs = NaN*zeros(size(self.constructTimeDynamicsPlot_summedSpectra,1)*size(self.constructTimeDynamicsPlot_summedSpectra,2),size(self.constructTimeDynamicsPlot_summedSpectra,3));
    for i = 1:size(self.constructTimeDynamicsPlot_summedSpectra,3)
        if ishandle(h_waitbar)
            waitbar((i-1)/size(self.constructTimeDynamicsPlot_summedSpectra,3),h_waitbar,sprintf('Fitting Spectrum %i of %i\n',i,size(self.constructTimeDynamicsPlot_summedSpectra,3)));
        else
            break;
        end
        fitX = reshape(self.constructTimeDynamicsPlot_spectrumWavenumber,[],1);
        fitY = reshape(self.constructTimeDynamicsPlot_summedSpectra(:,:,i),[],1)/self.constructTimeDynamicsPlot_averageNum;
        fitIndcs = ~isnan(fitX) & ~isnan(fitY);
        [beta fittedY] = LinearArrayFit(fitX(fitIndcs),...
            fitY(fitIndcs),...
            fitArray);
        betas(:,i) = beta;

        fittedYs(fitIndcs,i) = fittedY;
    end
    if ishandle(h_waitbar)
        close(h_waitbar);
    end

    h = figure;
    for i = 1:size(betas,1)
        x = self.constructTimeDynamicsPlot_relativeAcquireTime;
        plot(x,betas(i,:));
        hold on;
    end
    xlabel('Wavenumber [cm^{-1}');
    ylabel('N*L_{eff} [mlc/cm^3 * cm]');
    
     h = figure;
     ha = axes('Parent',h);
     colors = {'k'};
     for i = 1:numel(self.specNumsToDisplay)
            plotSpectrum = reshape(self.constructTimeDynamicsPlot_summedSpectra(:,:,self.specNumsToDisplay(i)),[],1)/self.constructTimeDynamicsPlot_averageNum+(i-1)*self.specOffsetI+self.specOffset;
            plot(ha,self.constructTimeDynamicsPlot_spectrumWavenumber,plotSpectrum,colors{mod(i-1,numel(colors))+1});
            hold(ha,'on');
            plot(ha,self.constructTimeDynamicsPlot_spectrumWavenumber,fittedYs(:,self.specNumsToDisplay(i))+(i-1)*self.specOffsetI+self.specOffset,'r');
     end
     
%% Nonlinear fit of spectra
    if numel(self.constructTimeDynamicsPlot_relativeAcquireTime) ~= size(self.constructTimeDynamicsPlot_summedSpectra,3)
       errordlg('The relativeAcquireTime parameter is not set correctly. Please set it and try again.'); 
       return
    end

    [filename,filepath] = uigetfile('*.specLib',sprintf('Load Spectra to Fit To'),'MultiSelect', 'on');
    if ~isequal(filename,0) && ~isequal(filepath,0)
       filenames = fullfile(filepath,filename);
    else
        return;
    end
    
    if ~iscell(filenames)
       filenames = {filenames}; 
    end

    for i = 1:numel(filenames)
       [~,~,ext] = fileparts(filenames{i});
       switch ext
           case '.specLib'
            data = load(filenames{i},'-mat');
            wavenumSim = data.wavenumber;
            intCrossSectionSim = data.integratedCrossSection;
            gaussianFWHMsim = 0.0001*ones(size(wavenumSim));
            lorentzianFWHMsim = 0.0001*ones(size(wavenumSim));
       end
    end

    fun = @(wavenum,concentration,pWavenumAxis,vipaGaussianFWHM,vipaLorentzianFWHM) makeMolecularSpectrum(polyval(pWavenumAxis,wavenum),wavenumSim,concentration*intCrossSectionSim,gaussianFWHMsim+vipaGaussianFWHM,lorentzianFWHMsim+vipaLorentzianFWHM);
    
    fitX = reshape(self.constructTimeDynamicsPlot_spectrumWavenumber,[],1);
    fitY = reshape(self.constructTimeDynamicsPlot_summedSpectra(:,:,28),[],1)/self.constructTimeDynamicsPlot_averageNum;
    fitIndcs = ~isnan(fitX) & ~isnan(fitY);
    
    y = fun(fitX(fitIndcs),1,[0 1 0],0.02,0.0001);
    figure;plot(fitX(fitIndcs),fitY(fitIndcs));
    hold on;
    plot(fitX(fitIndcs),y*1e-22,'r');
    
    opts = statset('nlinfit');
    opts.Display = 'iter';
    opts.TolFun = 1e-6;
    fitX = reshape(self.constructTimeDynamicsPlot_spectrumWavenumber,[],1);
    fitY = reshape(self.constructTimeDynamicsPlot_summedSpectra(:,:,28),[],1)/self.constructTimeDynamicsPlot_averageNum;
    fitIndcs = ~isnan(fitX) & ~isnan(fitY);
    conc0 = max(fitY(fitIndcs))/max(y);
    fitFun = @(params,wavenum) fun(wavenum,params(1)*conc0,params(2:4),params(5)*0.02,params(6)*0.02);
    params0 = [1 0 1 0 1 0];
    params = nlinfit(fitX(fitIndcs),fitY(fitIndcs),fitFun,params0,opts);
    
    figure;plot(fitX(fitIndcs),fitY(fitIndcs));
    hold on;
    plot(fitX(fitIndcs),fitFun(params,fitX(fitIndcs)),'r');

%% (2a) Nonlinear fit of spectra

    if numel(self.constructTimeDynamicsPlot_relativeAcquireTime) ~= size(self.constructTimeDynamicsPlot_summedSpectra,3)
       errordlg('The relativeAcquireTime parameter is not set correctly. Please set it and try again.'); 
       return
    end

    [filename,filepath] = uigetfile('*.simSpec',sprintf('Load Spectra to Fit To'),'MultiSelect', 'on');
    if ~isequal(filename,0) && ~isequal(filepath,0)
       filenames = fullfile(filepath,filename);
    else
        return;
    end
    
    if ~iscell(filenames)
       filenames = {filenames}; 
    end

    fitArray = {};
    for i = 1:numel(filenames)
       [~,~,ext] = fileparts(filenames{i});
       switch ext
           case '.simSpec'
                data = load(filenames{i},'-mat');
                fitArray{end+1} = data.wavenumber;
                fitArray{end+1} = data.crossSection;
                %figure;plot(data.wavenumber,data.crossSection);
                disp('Warning: .simSpec format may change');
           case '.csv'
               error('csv: not implemented')
           case '.specLib'
               error('specLib: not implemented')
       end
    end

%% Make specLib File from hitran
s = load('D2Olines')

idcs = find(s.s.iso == 4);
moleculeName = {'HOD'};
wavenumber = s.s.wnum;
integratedCrossSection = s.s.int;
moleculeNumber = ones(size(wavenumber));

save('HOD.specLib','moleculeName','moleculeNumber','wavenumber','integratedCrossSection');

%% Make speclib file from D2O
s = load('D2Olines')

idcs = find(s.s.iso == 4);
moleculeName = {'HOD'};
wavenumber = s.s.wnum;
integratedCrossSection = s.s.int;
moleculeNumber = ones(size(wavenumber));

save('HOD.specLib','moleculeName','moleculeNumber','wavenumber','integratedCrossSection');

%% Testing spectrum simulation
s = load('D2Olines');

moleculeName = {'D2O'};
wavenumber = s.wavenumber;
integratedCrossSection = s.strength*2.6867805e19;
moleculeNumber = ones(size(wavenumber));

save('D2O.specLib','moleculeName','moleculeNumber','wavenumber','integratedCrossSection');

%%

wavenumIn = 2500:0.01:2700;
wavenumSim = s.s.wnum;
int = s.s.int;
gaussianFWHMsim = 0.001*ones(size(wavenumSim));
lorentzianFWHMsim = 0.03*ones(size(wavenumSim));
minSim = wavenumSim-gaussianFWHMsim*10-lorentzianFWHMsim*10;
maxSim = wavenumSim+gaussianFWHMsim*10+lorentzianFWHMsim*10;

% Get the appropriate lines
simIndex = find(wavenumSim > min(wavenumIn) & wavenumSim < max(wavenumIn));

if ~isvector(wavenumIn)
   error('Input wavenumber must be a vector'); 
end

[wavenum, index] = sort(wavenumIn);

outputSpectrum = zeros(size(wavenum));
for i = 1:numel(simIndex)
    idcs = find(wavenum >= minSim(simIndex(i)) & wavenum <= maxSim(simIndex(i)));
    outputSpectrum(idcs) = outputSpectrum(idcs) + int(simIndex(i)).*complex_voigt(wavenum(idcs), wavenumSim(simIndex(i)),gaussianFWHMsim(simIndex(i)),lorentzianFWHMsim(simIndex(i)));
end

figure; plot(wavenum,outputSpectrum);

%%


c = 3e8; %m/s
h_bar = 1.055e-34;
kB = 1.38e-23; %J/K=Nm/K=kg m^2/s^2/K
T = 273.15+23; %K
m = 44*1.663e-27; %kg
u_velocity = sqrt(2*kB*T/m); %m/s

atm_press = 760;
conc = 1e-6;

wavenum = water_cm(:,1);%60:243
lambdas = 1/100./wavenum;
frequencies = c./lambdas;
linestrength = water_cm(:,2);
broad_1 =water_cm(:,3)*100*c/atm_press;% air
broad_2 = water_cm(:,4)*100*c/atm_press;% self
shift_ = water_cm(:,5)*100*c/atm_press;% pressure shift

nA = 2.5e19; % mol/cm3 (avogadro/molar volume)
L = 3640;%110; %cm
n_0 = 2.686e19;
S = linestrength*n_0*273.15/T;

single_pass = S*conc*pressure/atm_press;

omega = c./lambdas*2*pi;
k = omega/c;%
Doppler_width = sqrt(log(2))*k*u_velocity/pi/2; %Hz
homog_width = pressure * (broad_1*(1-0.054)+broad_2*0.054); %Hz);%

% grid_ = 2596;%10000;%$
% freq_scale = 100*c*linspace(2900,3150,grid_);
freq_scale = 100*c*wavenum_scale;
grid_ = length(wavenum_scale);

ilosc_linii = length(wavenum);
transition = zeros(grid_, ilosc_linii);
krok = wavenum_scale(2)-wavenum_scale(1);
narrow = round(5/krok);
for qwe = 1:ilosc_linii 
      peak_pos = find(round(freq_scale/krok/30e9) == round(frequencies(qwe)/krok/30e9));
    f_min = peak_pos-narrow; 
    f_max = peak_pos+narrow;
    if f_min < 1
        f_min =1;
        end
    if f_max>length(freq_scale)
        f_max= length(freq_scale);
    end

    transition(f_min:f_max,qwe) =single_pass(qwe)*complex_voigt(freq_scale(f_min:f_max), frequencies(qwe)+shift_(qwe)*pressure, Doppler_width(qwe), homog_width(qwe));
    % disp(qwe)
end

%% Pick peaks and fit them to a voigt profile

plotSpectrum = reshape(self.constructTimeDynamicsPlot_summedSpectra(:,:,27),[],1)/self.constructTimeDynamicsPlot_averageNum;
[peaks,locs] = findpeaks(plotSpectrum,');
figure;plot(reshape(self.constructTimeDynamicsPlot_spectrumWavenumber,[],1),plotSpectrum);
hold on;
scatter(self.constructTimeDynamicsPlot_spectrumWavenumber(locs),peaks);