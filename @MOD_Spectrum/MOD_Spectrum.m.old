function returnData = MOD_Spectrum(hObject,argument)
%SUB_calibration - initializes and calibrates spectra
%   argument - a parameter that indicates what is to be done

this = mfilename;
thisModule = str2func(mfilename);

if nargin == 0
   edit(this);
   return
end

if iscell(argument)
    if length(argument) > 1
        vararg = argument(2:end);
    else
        vararg = {};
    end
    argument = argument{1};
end

switch argument
    
    %%%%%%%%%%%%%%%%%%%%%
    % STANDARD ROUTINES
    %%%%%%%%%%%%%%%%%%%%%
    case 'getDependencies'
       % Check for MOD_camera
        returnData = {@MOD_FLIRcamera};
    case 'getPublicProperties'
        returnData = [ ...
            PropertyGridField('double', pi, ...
                'Category', 'Spectrum', ...
                'DisplayName', 'real double', ...
                'Description', 'Standard MatLab type.')];
    case 'constructGUI'
        handles = guidata(hObject);
        % Construct GUI Framework
        theTab = uiextras.Panel( 'Parent', handles.tabpanel, 'Padding', 5, 'Title', 'Spectrum');
        handles.tabpanelNames{end+1} = 'Spectrum';
        handles.tabpanelCallbacks{end+1} = @(hObject) thisModule(hObject,'callback_update');
        vbox = uiextras.VBox( 'Parent', theTab );
        handles.moduleData.(this).axes = axes( 'Parent', vbox );
        hbox = uiextras.HButtonBox( 'Parent', vbox, 'Padding', 5 );
        handles.moduleData.(this).button = uicontrol( 'Parent', hbox, ...
            'String', 'Acquire' );
        handles.moduleData.(this).referenceButton = uicontrol( 'Parent', hbox, ...
            'String', 'Acquire Reference' );
        set( vbox, 'Sizes', [-1 35] )
        handles.moduleData.(this).dataPlotHandle = plot(1:10,1:10,'Parent',handles.moduleData.(this).axes);

        % Set context menu
        calibMenu = uicontextmenu;
        handles.moduleData.(this).menu_recordReference = ...
            uimenu(calibMenu, ...
                'Label', 'New Figure', ...
                'Callback', @(hObject,eventdata) thisModule(hObject,'callback_newFigure'));
         xAxisMenu = uimenu(calibMenu, 'Label', 'X Axis');
             uimenu(xAxisMenu, ...
                 'Label', 'Pixel Number', ...
                 'Callback', @(hObject,eventdata) thisModule(hObject,{'callback_xAxisMenu','pixel number'}));
             uimenu(xAxisMenu, ...
                 'Label', 'Wavelength [\mum]', ...
                 'Callback', @(hObject,eventdata) thisModule(hObject,{'callback_xAxisMenu','wavelength'}));
             uimenu(xAxisMenu, ...
                 'Label', 'Wavenumber [cm^{-1}]', ...
                 'Callback', @(hObject,eventdata) thisModule(hObject,{'callback_xAxisMenu','wavenumber'}));
             uimenu(xAxisMenu, ...
                 'Label', '(FFT) Etalon Length [mm]', ...
                 'Callback', @(hObject,eventdata) thisModule(hObject,{'callback_bothAxisMenu','etalon FFT X','etalon FFT Y'}));
         yAxisMenu = uimenu(calibMenu, 'Label', 'Y Axis');
             uimenu(yAxisMenu, ...
                 'Label', 'Counts', ...
                 'Callback', @(hObject,eventdata) thisModule(hObject,{'callback_yAxisMenu','counts'}));
             uimenu(yAxisMenu, ...
                 'Label', 'Counts w/o Background Subtraction', ...
                 'Callback', @(hObject,eventdata) thisModule(hObject,{'callback_yAxisMenu','countsWithoutBackgroundSubtraction'}));
             uimenu(yAxisMenu, ...
                 'Label', 'Attenuation (1-T_{cav})', ...
                 'Callback', @(hObject,eventdata) thisModule(hObject,{'callback_yAxisMenu','attenuation'}));
             uimenu(yAxisMenu, ...
                 'Label', 'Absorption Coefficient', ...
                 'Callback', @(hObject,eventdata) thisModule(hObject,{'callback_yAxisMenu','absorption coefficient'}));
             uimenu(yAxisMenu, ...
                 'Label', '(FFT) Etalon Amplitude', ...
                 'Callback', @(hObject,eventdata) thisModule(hObject,{'callback_bothAxisMenu','etalon FFT X','etalon FFT Y'}));
         calculateMenu = uimenu(calibMenu, 'Label', 'Calculate');
             uimenu(calculateMenu, ...
                 'Label', 'Standard Deviation', ...
                 'Callback', @(hObject,eventdata) thisModule(hObject,{'callback_calculateMenu','StDev'}));
        set(handles.moduleData.(this).axes,'uicontextmenu',calibMenu);
        
        % Set the x and y axes to default
        handles.moduleData.(this).xAxis = '';
        handles.moduleData.(this).yAxis = '';
        
        % Set reference spectrum variable
        handles.moduleData.(this).refSpectrumY = [];
        
        % Set GUI Callbacks
        set(handles.moduleData.(this).button,...
            'Style','togglebutton',...
            'String','Acquire',...
            'Visible','on',...
            'Callback',@(hObject,eventdata) thisModule(hObject,'callback_AcquireButton'));
        set(handles.moduleData.(this).referenceButton,...
            'Style','togglebutton',...
            'String','Acquire Reference',...
            'Visible','on');
        guidata(hObject,handles);
        
    %%%%%%%%%%%%%%%%%    
    % CALLBACKS
    %%%%%%%%%%%%%%%%%
    case 'callback_bothAxisMenu'
        handles = guidata(hObject);
        if numel(vararg) > 1
            handles.moduleData.(this).xAxis = vararg{1};
            handles.moduleData.(this).yAxis = vararg{2};
        else
            handles.moduleData.(this).xAxis = '';
            handles.moduleData.(this).yAxis = '';
        end
        guidata(hObject,handles);
    case 'callback_xAxisMenu'
        handles = guidata(hObject);
        if numel(vararg) > 0
            handles.moduleData.(this).xAxis = vararg{1};
        else
            handles.moduleData.(this).xAxis = '';
        end
        guidata(hObject,handles);
    case 'callback_yAxisMenu'
        handles = guidata(hObject);
        if numel(vararg) > 0
            handles.moduleData.(this).yAxis = vararg{1};
        else
            handles.moduleData.(this).yAxis = '';
        end
        guidata(hObject,handles);
    case 'callback_calculateMenu'
        handles = guidata(hObject);
        if numel(vararg) > 0
            switch vararg{1}
                case 'StDev'
                    msgbox(sprintf('The variance of the current plot is: %f',nanvar(get(handles.moduleData.(this).dataPlotHandle,'YData'))));
                case 'Var'
                    msgbox(sprintf('The variance of the current plot is: %f',nanvar(get(handles.moduleData.(this).dataPlotHandle,'YData'))));
            end
        end
        guidata(hObject,handles);
    case 'callback_newFigure'
        handles = guidata(hObject);
        
        % Construct a new figure
        h = figure;
        plot(get(handles.moduleData.(this).dataPlotHandle,'XData'),...
            get(handles.moduleData.(this).dataPlotHandle,'YData'));
    
    case 'callback_AcquireButton'
        handles = guidata(hObject);
        if ~(get(handles.moduleData.(this).button, 'value'))
            return
        end
        % Live image
        % Continue as long as button is pressed
        imgsPerBackground = 1e6;
        bkgCounter = 0;

        % Set save file if needed
        [filename,filepath] = uiputfile('*.csv','Save Spectra As...');
        if ~isequal(filename,0) && ~isequal(filepath,0)
           saveFilename = fullfile(filepath,filename);
           fileCounter = 0;
        else
           saveFilename = [];
           fileCounter = 0;
        end
        
        % Aquire test image
        MOD_Arduino(hObject,'public_oneCameraImage');
        spectrumY = MOD_VIPA(hObject,'public_acquireSpectrum');
        
        % Acquire ref spectrum if needed
        if ~isequal(size(handles.moduleData.(this).refSpectrumY),size(spectrumY))
            handles.moduleData.(this).refSpectrumY = ones(size(spectrumY));
        end
        
        while (get(handles.moduleData.(this).button, 'value'))
            
            % Check to see if we need a new background
            if mod(bkgCounter,imgsPerBackground) == 0 || (get(handles.moduleData.(this).referenceButton, 'value'))
                 MOD_Arduino(hObject,'public_shutterProgram');
                 bkgSpectra = MOD_VIPA(hObject,{'public_acquireMultipleSpectra',3});
                 bkgSpectrum = bkgSpectra(:,2);
                 idx = find(bkgSpectrum<0.75*nanmean(bkgSpectrum) | bkgSpectrum>1.5*nanmean(bkgSpectrum));
                 bkgSpectrum(idx) = NaN;
                bkgCounter = 0;
                
                if ~isempty(saveFilename)
                   x = get(handles.moduleData.(this).dataPlotHandle,'XData');
                   y = double(bkgSpectrum);
                   fileToSave = sprintf('%s_%i',saveFilename,fileCounter);
                   saveDate = now;
                   save(sprintf('%s_%i.mat',sprintf('%s_%i_background.mat',saveFilename,fileCounter),fileCounter),'x','y','saveDate');
                   fprintf('Saved ''%s''\n',sprintf('%s_%i',filename,fileCounter));
                end
                
                % Acquire ref spectrum if needed
                if (get(handles.moduleData.(this).referenceButton, 'value'))
                     MOD_Arduino(hObject,'public_oneCameraImage');
                     handles.moduleData.(this).refSpectrumY = MOD_VIPA(hObject,'public_acquireSpectrum')-bkgSpectrum;
                     set(handles.moduleData.(this).referenceButton, 'value',0)
                end
            end
            bkgCounter = bkgCounter + 1;
            
            % Aquire image
            MOD_Arduino(hObject,'public_oneCameraImage');
            spectrumY = MOD_VIPA(hObject,'public_acquireSpectrum')-bkgSpectrum;
            spectrumY(isnan(bkgSpectrum))= NaN;
            spectrumX = MOD_VIPA(hObject,'public_getWavelengthAxis');
            
            % Construct the x-axis
            xaxisCell = thisModule(hObject,{'private_constructXaxis',spectrumX});
            
            % Construct the y-axis
            yaxisCell = thisModule(hObject,{'private_constructYaxis',spectrumY,handles.moduleData.(this).refSpectrumY,bkgSpectrum});
            
            % Update the axis labels
            xlabel(handles.moduleData.(this).axes,xaxisCell{1});
            ylabel(handles.moduleData.(this).axes,yaxisCell{1});
            
            % Display the spectrum
            set(handles.moduleData.(this).dataPlotHandle,'XData',xaxisCell{2});
            set(handles.moduleData.(this).dataPlotHandle,'YData',yaxisCell{2});
            
            % Update the axis limits if needed
            if ~isempty(xaxisCell{3})
                set(handles.moduleData.(this).axes,'XLim',xaxisCell{3});
            end
            if ~isempty(yaxisCell{3})
                set(handles.moduleData.(this).axes,'YLim',yaxisCell{3});
            end
            
            if ~isempty(saveFilename)
               x = get(handles.moduleData.(this).dataPlotHandle,'XData');
               y = get(handles.moduleData.(this).dataPlotHandle,'YData');
               fileToSave = sprintf('%s_%i',saveFilename,fileCounter);
               saveDate = now;
               save(sprintf('%s_%i.mat',sprintf('%s_%i.mat',saveFilename,fileCounter),fileCounter),'x','y','saveDate');
               fprintf('Saved ''%s''\n',sprintf('%s_%i',filename,fileCounter));
               fileCounter = fileCounter + 1;
            end
            
            pause(0.05);
        end
        
        guidata(hObject,handles)
        
    %%%%%%%%%%%%%%%%%%   
    % PRIVATE METHODS
    %%%%%%%%%%%%%%%%%%
    case 'private_constructXaxis'
        handles = guidata(hObject);
        switch handles.moduleData.(this).xAxis
            case 'pixel number'
                returnData = {'Pixel Number',1:numel(vararg{1}),[]};
            case 'wavenumber'
                returnData = {'Wavenumber [cm^{-1}]',1e4./vararg{1},[]};
            case 'wavelength'
                returnData = {'Wavelength [\mum]',vararg{1},[]};
            case 'etalon FFT X'
                NFFT = 2^nextpow2(numel(vararg{1})); % Next power of 2 from length of y
                wavenumDiff = abs(min(diff(1e4./vararg{1})));
                returnData = {'Etalon Length [mm]',10/(8*wavenumDiff)*linspace(0,1,NFFT/2+1),[]};
            otherwise
                returnData = {'Pixel Number',1:numel(vararg{1}),[]};
        end
    case 'private_constructYaxis'
        handles = guidata(hObject);
        switch handles.moduleData.(this).yAxis
            case 'counts'
                returnData = {'Counts',vararg{1},[]};
            case 'countsWithoutBackgroundSubtraction'
                returnData = {'Counts w/o Background Subtraction',vararg{1}+vararg{3},[]};
            case 'attenuation'
                returnData = {'Attenuation (1-T_{cav})',vararg{1}./vararg{2},[]};
            case 'transmission'
                returnData = {'Transmission (T_{cav})',vararg{1}./vararg{2},[]};
            case 'absorption coefficient'
                returnData = {'Absorption Coefficient [cm^{-1}]',0,[]};
            case 'etalon FFT Y'
                NFFT = 2^nextpow2(numel(vararg{1})); % Next power of 2 from length of y
                y = vararg{1}./vararg{2};
                y(isnan(y)) = 1;
                Y = fft(y,NFFT)/numel(y);
                %f = Fs/2*linspace(0,1,NFFT/2+1);

                returnData = {'FFT Amplitude',2*abs(Y(1:NFFT/2+1)),[]};
            otherwise
                returnData = {'Counts',vararg{1},[]};
        end
       
end

end